// -------------------------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License (MIT). See LICENSE in the repo root for license information.
// -------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Linq;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace Microsoft.Health.Extensions.BuildTimeCodeGenerator
{
    internal class Program
    {
        public static void Main(string[] args)
        {
            if (args.Length != 4)
            {
                Console.WriteLine($"Usage: dotnet {typeof(Program).Assembly.GetName().Name}.dll <GeneratorName> <OutputFilePath> <NamespaceName> <SemicolonDelimitedBuildReferences>");
                Environment.Exit(1);
            }

            string generatorName = args[0];
            string outputFile = args[1];
            string namespaceName = args[2];
            string className = Path.GetFileName(outputFile).Split('.')[0];
            string references = args[3];

            Compilation compilation = CSharpCompilation.Create("Generated")
                .AddReferences(references.Split(';').Where(File.Exists).Select(p => MetadataReference.CreateFromFile(p)));

            var generator = (ICodeGenerator)Activator.CreateInstance(Assembly.GetExecutingAssembly().GetTypes().SingleOrDefault(t => t.Name == generatorName) ?? throw new ArgumentException($"Generator '{generatorName} not found"));

            SyntaxNode syntaxNode = generator.Generate(namespaceName, className, compilation);

            syntaxNode = syntaxNode.WithLeadingTrivia(
                SyntaxFactory.Comment("//------------------------------------------------------------------------------"),
                SyntaxFactory.Comment("// <auto-generated>"),
                SyntaxFactory.Comment("//     This code was generated by a tool."),
                SyntaxFactory.Comment("//"),
                SyntaxFactory.Comment("//     Changes to this file may cause incorrect behavior and will be lost if"),
                SyntaxFactory.Comment("//     the code is regenerated."),
                SyntaxFactory.Comment("// </auto-generated>"),
                SyntaxFactory.Comment("//------------------------------------------------------------------------------"));

            File.WriteAllText(outputFile, syntaxNode.NormalizeWhitespace().SyntaxTree.ToString());
        }
    }
}
